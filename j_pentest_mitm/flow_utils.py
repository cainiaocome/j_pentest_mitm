#!/usr/bin/env python
# encoding: utf8
from mitmproxy import flow
from mitmproxy.proxy import ProxyServer, ProxyConfig
from mitmproxy.script import concurrent
from netlib.http import decoded
from mitmproxy.models import HTTPResponse
from netlib.http import Headers
from urllib import unquote, urlencode, quote
from urlparse import parse_qs
from pprint import pprint
import json
import base64
import pickle
import threading
import traceback

import requests

def dumpflow( flow ):
    req = flow.request
    res = flow.response
    with decoded( res ):
        dumpedflow = {   
            'url':req.url,
            'method': req.method,

            'request_headers':pickle.dumps( req.headers ),
            'request_content':pickle.dumps( req.content ),  # raw content

            'response_headers':pickle.dumps( res.headers ),
            'response_content':pickle.dumps( res.content ),
        }

    return dumpedflow

def loadflow( dumpedflow ):
    flow = {}
    for key in dumpedflow.keys():
        val = dumpedflow[key]
        if key in [ 'request_headers', 'request_content', 'response_headers', 'response_content' ]:
            flow[key] = pickle.loads( val )
        else:
            flow[key] = val
    return flow
