#!/usr/bin/env python
# encoding: utf8

import os
import sys
import time
import traceback
import json
import Queue
import argparse
import hashlib
import random
import pickle

import requests
import subprocess

import j_pentest_utils
import flow_utils

selfpath = os.path.realpath( __file__ )
selfdir = os.path.dirname( selfpath )
devnull = j_pentest_utils.get_devnull()

class MitmProcess(object):
    """
        start a mitmproxy process, store listen port
        and provide one method to get all logged request and response
    """

    def __init__( self ):

        self.mitm_port = j_pentest_utils.get_one_port()

        self.mitm_proxy = {'http':'127.0.0.1:{}'.format( str(self.mitm_port) )}

        args=[ 
                'mitmdump', 
                '-p', str(self.mitm_port), 
                '-s', os.path.join(selfdir, 'proxy.py'),
             ]

        #self.mitm_process = subprocess.Popen( args, bufsize=-1, )
        self.mitm_process = subprocess.Popen( args, bufsize=-1, stdout=devnull, stderr=devnull )

    def _list( self ):
        r = requests.get( 'http://mitm.com/list', proxies=self.mitm_proxy, timeout=2 )
        r = json.loads( r.text )
        r = map( lambda dumpedflow: flow_utils.loadflow( dumpedflow ), r )
        return r

    def check( self ):
        try:
            r = requests.get( 'http://mitm.com/list', proxies=self.mitm_proxy, timeout=2 )
            r = json.loads( r.text )
            r = requests.get( 'http://butian.360.cn/', proxies=self.mitm_proxy, timeout=2 )
            return True
        except:
            traceback.print_exc()
            return False

    def wait( self ):
        while True:
            if self.check():
                break
            else:
                print( 'checking proxy' )
                time.sleep( 1 )
